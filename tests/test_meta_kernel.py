from unittest.mock import patch, MagicMock

import meta_kernel.problem_miner as pm
import meta_kernel.solution_designer as sd
import meta_kernel.business_composer as bc
import meta_kernel.spec_generator as sg
import meta_kernel.venture_launcher as vl
import meta_kernel.growth_evaluator as ge


class DummyMessage:
    def __init__(self, content: str):
        self.content = content


class DummyChoice:
    def __init__(self, content: str):
        self.message = DummyMessage(content)


class DummyResponse:
    def __init__(self, content: str):
        self.choices = [DummyChoice(content)]


def mock_chatcompletion(content: str):
    return DummyResponse(content)


def test_mine_problems_calls_openai():
    with patch.object(pm.openai, 'ChatCompletion', new=MagicMock()) as mock_cls:
        mock_cls.create.return_value = mock_chatcompletion('ok')
        assert pm.mine_problems() == 'ok'
        mock_cls.create.assert_called_once()


def test_design_solution_calls_openai():
    with patch.object(sd.openai, 'ChatCompletion', new=MagicMock()) as mock_cls:
        mock_cls.create.return_value = mock_chatcompletion('arch')
        assert sd.design_solution('problem') == 'arch'
        mock_cls.create.assert_called_once()


def test_design_biz_model_calls_openai():
    with patch.object(bc.openai, 'ChatCompletion', new=MagicMock()) as mock_cls:
        mock_cls.create.return_value = mock_chatcompletion('biz')
        assert bc.design_biz_model('sol') == 'biz'
        mock_cls.create.assert_called_once()


def test_generate_saas_spec_structure():
    spec = sg.generate_saas_spec('solution', 'model')
    assert spec['project'] == 'AutoGenerated SaaS'
    assert spec['description'] == 'solution'
    assert spec['billing'] == 'model'


def test_launch_venture_writes_yaml(tmp_path):
    spec = {'a': 1}
    path = tmp_path / 'spec.yml'
    with patch('subprocess.run') as mock_run:
        vl.launch_venture(spec, spec_path=str(path))
        mock_run.assert_called_once()
        assert path.exists()


def test_evaluate_performance_calls_openai():
    with patch.object(ge.openai, 'ChatCompletion', new=MagicMock()) as mock_cls:
        mock_cls.create.return_value = mock_chatcompletion('next')
        assert ge.evaluate_performance('data') == 'next'
        mock_cls.create.assert_called_once()
