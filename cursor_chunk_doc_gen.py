"""Docstring auto-generation module.

This module reads Python source code and automatically inserts
simple docstrings for functions and classes that do not already
have one. It is intentionally lightweight and does not rely on
external services. Generated docstrings follow a basic template
including the function or class name and its parameters.
"""

from __future__ import annotations

import ast


def _generate_docstring_for_function(node: ast.FunctionDef) -> str:
    """Return a placeholder docstring for a function."""
    params = [arg.arg for arg in node.args.args]
    param_list = ", ".join(params)
    if params:
        return (
            f"Auto-generated docstring for function '{node.name}'.\n\n"
            f"Args:\n    {param_list}"
        )
    return f"Auto-generated docstring for function '{node.name}'."


def _generate_docstring_for_class(node: ast.ClassDef) -> str:
    """Return a placeholder docstring for a class."""
    return f"Auto-generated docstring for class '{node.name}'."


def _insert_docstring(node: ast.AST) -> None:
    """Insert a generated docstring into the given AST node."""
    if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
        docstring = _generate_docstring_for_function(node)
    elif isinstance(node, ast.ClassDef):
        docstring = _generate_docstring_for_class(node)
    else:
        return

    doc_node = ast.Expr(value=ast.Constant(docstring))
    node.body.insert(0, doc_node)


def add_docstrings(source: str) -> str:
    """Return source with autogenerated docstrings added."""
    tree = ast.parse(source)
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef, ast.ClassDef)):
            if ast.get_docstring(node) is None:
                _insert_docstring(node)
    return ast.unparse(tree)


def process_file(path: str, inplace: bool = False) -> str:
    """Generate docstrings for the given file.

    Args:
        path: Path to the Python source file.
        inplace: If ``True``, overwrite the file. Otherwise return the
            generated source.

    Returns:
        The generated source code with docstrings.
    """
    with open(path, "r", encoding="utf-8") as f:
        source = f.read()

    updated = add_docstrings(source)

    if inplace:
        with open(path, "w", encoding="utf-8") as f:
            f.write(updated)
    return updated


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Auto generate docstrings for Python modules")
    parser.add_argument("path", help="Path to Python file")
    parser.add_argument("--inplace", action="store_true", help="Modify file in place")
    args = parser.parse_args()

    output = process_file(args.path, inplace=args.inplace)  # pylint: disable=invalid-name
    if not args.inplace:
        print(output)
